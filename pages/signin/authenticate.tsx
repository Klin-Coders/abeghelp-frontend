import Button from "@/components/primitives/Button/button";
import { useToast } from "@/components/ui/use-toast";
import { type ApiResponse } from "@/interfaces/formInputs";
import AuthLayout from "@/layouts/authLayout";
import callApi from "@/lib/api/callApi";
import authPadlock from "@/public/assets/icons/auth/auth-padlock.svg";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import OtpInput from "react-otp-input";

const EmailAuth = ({ email }: { email: string }) => {
  const [otp, setOtp] = useState("");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();
  const handleSubmit = async (e: React.FormEvent<HTMLButtonElement>) => {
    e.preventDefault();
    setLoading(true);
    const { data, error } = await callApi<ApiResponse>(
      "/auth/2fa/time/verify",
      {
        email,
        token: String(otp),
        twoFactorVerificationType: "EMAIL_CODE",
      },
    );
    if (error) {
      setLoading(false);
      return toast({
        title: error.status as string,
        description: error.message,
        duration: 3000,
      });
    } else {
      setLoading(false);
      toast({
        title: "Success",
        description: (data as { message: string }).message,
        duration: 3000,
      });
    }
  };

  return (
    <div className="flex flex-col items-center text-sm md:text-base">
      <div className="text-center space-y-6">
        <Image
          src={authPadlock as string}
          alt=""
          className="w-[80px] aspect-square mx-auto"
        />
        <p className="">{` Enter the 6 digits code we sent to ${email}`}</p>
        <OtpInput
          value={otp}
          onChange={setOtp}
          numInputs={6}
          containerStyle="flex justify-between gap-1"
          inputStyle="!w-[15%] aspect-square border-[0.25px] border-[#0068FF]/10 focus:border-abeg-teal focus:border rounded-[3px]"
          inputType="number"
          renderInput={(props) => <input {...props} />}
        />
      </div>
      <Button
        type="submit"
        disabled={loading}
        loading={loading}
        onClick={(e) => void handleSubmit(e)}
        className="text-white block bg-formBtn font-semibold py-4 w-full rounded-md my-8"
        fullWidth
      >
        Confirm
      </Button>
      <div className="space-y-3">
        <p className="text-center">
          Didn&apos;t get a code? We can&nbsp;
          <button
            type="submit"
            // disabled={isSubmitting}
            // onClick={handleOption}
            className="text-abeg-teal font-medium"
          >
            resend it
          </button>
        </p>
        <p className="text-center text-sm">
          If youâ€™re unable to receive a security code, use one of your backup
          codes.
          {/* &nbsp; */}
          {/* <button
            type="submit"
            // disabled={isSubmitting}
            // onClick={handleOption}
            className="text-abeg-teal font-medium"
          >
            backup codes.
          </button> */}
        </p>
      </div>
    </div>
  );
};

const AuthApp = ({ email }: { email: string }) => {
  const [otp, setOtp] = useState("");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();
  const handleSubmit = async (e: React.FormEvent<HTMLButtonElement>) => {
    e.preventDefault();
    setLoading(true);
    const { data, error } = await callApi<ApiResponse>(
      "/auth/2fa/time/verify",
      {
        email,
        token: String(otp),
        twoFactorVerificationType: "CODE",
      },
    );
    if (error) {
      setLoading(false);
      return toast({
        title: error.status as string,
        description: error.message,
        duration: 3000,
      });
    } else {
      setLoading(false);
      toast({
        title: "Success",
        description: (data as { message: string }).message,
        duration: 3000,
      });
    }
  };

  return (
    <div className="flex flex-col items-center text-sm md:text-base">
      <div className="text-center space-y-6">
        <Image
          src={authPadlock as string}
          alt=""
          className="w-[80px] aspect-square mx-auto"
        />
        <p className="">
          Enter the 6 digits code generated by your authenticator app
        </p>
        <form action="" className="">
          <OtpInput
            value={otp}
            onChange={setOtp}
            numInputs={6}
            containerStyle="flex justify-between gap-1"
            inputStyle="!w-[15%] aspect-square border-[0.25px] border-[#0068FF]/10 focus:border-abeg-teal focus:border rounded-[3px]"
            inputType="number"
            renderInput={(props) => <input {...props} />}
          />

          <Button
            type="submit"
            disabled={loading}
            loading={loading}
            onClick={(e) => void handleSubmit(e)}
            className="text-white block bg-formBtn font-semibold py-4 w-full rounded-md my-8"
            fullWidth
          >
            Confirm
          </Button>
        </form>{" "}
      </div>
    </div>
  );
};
const AuthenticateUser = () => {
  const [queryParam, setQueryParam] = useState({
    email: "",
    verificationChoice: "",
  });
  const router = useRouter();
  useEffect(() => {
    setQueryParam({
      email: router.query.email as string,
      verificationChoice: router.query.verificationChoice as string,
    });
  }, [router]);

  return (
    <AuthLayout
      formType="other"
      withHeader={false}
      hasSuccess={false}
      bannerTextColor
    >
      {queryParam.verificationChoice === "email" ? (
        <EmailAuth email={queryParam.email} />
      ) : (
        <AuthApp email={queryParam.email} />
      )}
    </AuthLayout>
  );
};

export default AuthenticateUser;
