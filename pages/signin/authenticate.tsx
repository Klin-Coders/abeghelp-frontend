import OtpInputDisplay from "@/components/Shared/OtpInputDisplay";
import Button from "@/components/primitives/Button/button";
import { useToast } from "@/components/ui/use-toast";
import { type ApiResponse, type User } from "@/interfaces/apiResponses";
import AuthLayout from "@/layouts/authLayout";
import callApi from "@/lib/api/callApi";
import { layoutForAuthPages } from "@/lib/utils/AuthPagesLayout";
import { useSession } from "@/store/useSession";
import { useRouter } from "next/router";
import {
  useEffect,
  useRef,
  useState,
  type Dispatch,
  type FormEvent,
} from "react";

type Props = {
  email?: string;
  loading: boolean;
  otp: string;
  setOtp: Dispatch<React.SetStateAction<string>>;
  handleSubmit: (e: FormEvent<HTMLButtonElement>) => void;
};
const EmailAuth = ({ otp, setOtp, handleSubmit, loading, email }: Props) => {
  const { toast } = useToast();
  const resend = useRef(false);

  const resendCode = async () => {
    // e.preventDefault();

    resend.current = true;
    const { data, error } = await callApi<ApiResponse>("/auth/2fa/code/email");
    if (error) {
      resend.current = false;
      return toast({
        title: error.status as string,
        description: error.message,
        duration: 2000,
      });
    } else {
      resend.current = false;
      toast({
        title: "Success",
        description: (data as { message: string }).message,
        duration: 2000,
      });
    }
  };
  useEffect(() => {
    void resendCode();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <OtpInputDisplay
      otp={otp}
      setOtp={setOtp}
      topSection={
        <p className="">{` Enter the 6 digits code we sent to ${email}`}</p>
      }
      bottomSection={
        <>
          <Button
            type="submit"
            disabled={loading}
            loading={loading}
            onClick={(e) => void handleSubmit(e)}
            className="my-8 block w-full rounded-md bg-formBtn py-4 font-semibold text-white"
            fullWidth
          >
            Confirm
          </Button>
          <div className="space-y-3">
            <p className="text-center">
              Didn&apos;t get a code? We can&nbsp;
              <Button
                type="submit"
                disabled={resend.current}
                onClick={() => void resendCode()}
                className="p-0 font-medium text-abeg-teal disabled:bg-transparent disabled:text-neutral-50"
              >
                resend it
              </Button>
            </p>
            <p className="text-center text-sm">
              If youâ€™re unable to receive a security code, use one of your
              backup codes.
            </p>
          </div>
        </>
      }
    />
  );
};

const AuthApp = ({ otp, setOtp, handleSubmit, loading }: Props) => {
  return (
    <OtpInputDisplay
      otp={otp}
      setOtp={setOtp}
      topSection={
        <p className="">
          Enter the 6 digits code generated by your authenticator app
        </p>
      }
      bottomSection={
        <Button
          type="submit"
          disabled={loading}
          loading={loading}
          onClick={(e) => void handleSubmit(e)}
          className="mt-8 block w-full rounded-md bg-formBtn py-4 font-semibold text-white"
          fullWidth
        >
          Confirm
        </Button>
      }
    />
  );
};
const AuthenticateUser = () => {
  const [otp, setOtp] = useState("");
  const [loading, setLoading] = useState(false);
  const [userPref, setUserPref] = useState({
    verificationType: "",
    email: "",
  });
  const { toast } = useToast();
  const { user } = useSession((state) => state);
  const router = useRouter();
  const castedUser = user as User;
  const { email, verificationChoice } = router.query;
  useEffect(() => {
    setUserPref({
      verificationType: verificationChoice as string,
      email: email as string,
    });
  }, [email, verificationChoice]);

  const handleSubmit = async (e: React.FormEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (otp === "")
      return toast({
        title: "Error",
        description: "Please enter a valid code",
        duration: 1500,
      });
    setLoading(true);
    const { data, error } = await callApi<ApiResponse>("/auth/2fa/verify", {
      token: String(otp),
    });
    if (error) {
      setLoading(false);
      return toast({
        title: error.status as string,
        description: error.message,
        duration: 2000,
      });
    } else {
      setLoading(false);
      toast({
        title: "Success",
        description: (data as { message: string }).message,
        duration: 2000,
      });
      void router.push("/");
    }
  };
  // if (user !== null) {
  //   // // setTimeout(() => {}, 1000);
  //   void router.back();
  //   return (
  //     <LoadingComp message={`You are already signed in. Redirecting back`} />
  //   );
  // }
  return (
    <AuthLayout withHeader={false} hasSuccess={false}>
      {castedUser?.twoFA.type !== "EMAIL" ||
      userPref?.verificationType.toUpperCase() === "EMAIL" ? (
        <EmailAuth
          email={castedUser?.email || userPref?.email}
          otp={otp}
          setOtp={setOtp}
          handleSubmit={(e) => void handleSubmit(e)}
          loading={loading}
        />
      ) : (
        <AuthApp
          otp={otp}
          setOtp={setOtp}
          handleSubmit={(e) => void handleSubmit(e)}
          loading={loading}
        />
      )}
    </AuthLayout>
  );
};

export default AuthenticateUser;

AuthenticateUser.getLayout = layoutForAuthPages;
AuthenticateUser.protect = true;
