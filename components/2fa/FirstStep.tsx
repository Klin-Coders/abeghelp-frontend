import type { ApiResponse } from "@/interfaces";
import { AuthenticatedUserLayout } from "@/layouts";
import { callApi } from "@/lib";
import { ClipboardIcon } from "@radix-ui/react-icons";
import Image from "next/image";
import { useEffect, useState } from "react";
import { toast } from "sonner";
import { CustomDialog, OtpInputDisplay, Spinner } from "../common";
import { Button } from "../ui";

type AuthenticatorFirstStepProps = {
	setStep: React.Dispatch<React.SetStateAction<number>>;
	recoveryCode: React.MutableRefObject<string | null>;
};

const FirstStep = ({ setStep, recoveryCode }: AuthenticatorFirstStepProps) => {
	const [isQRCodeLoading, setIsQRCodeLoading] = useState(true);
	const [QRCodeError, setQRCodeError] = useState(false);
	const [otpLoading, setOtpLoading] = useState(false);
	const [data, setData] = useState<ApiResponse>();
	const [otp, setOtp] = useState("");

	// get qr code or secret
	useEffect(() => {
		const setup2fa = async () => {
			const { data: dataInfo, error } = await callApi<ApiResponse>(
				"/auth/2fa/setup",
				{
					twoFactorType: "APP",
				}
			);

			if (dataInfo) {
				setData(dataInfo);
				setIsQRCodeLoading(false);
				setQRCodeError(false);
			}
			if (error) {
				toast.error(error.status, {
					description: error.message,
				});
				setQRCodeError(true);
				setIsQRCodeLoading(false);
			}
		};
		void setup2fa();
	}, [isQRCodeLoading]);

	const handleCopy = async () => {
		try {
			await navigator.clipboard
				.writeText(data?.data?.secret as string)
				.then(() => {
					toast.success("Success", {
						description: "Key copied to clipboard",
					});
				});
		} catch {
			toast.error("Error", {
				description: "Could not copy",
			});
		}
	};

	const handleOtpSubmit = async () => {
		setOtpLoading(true);

		const { data: dataInfo, error } = await callApi<ApiResponse>(
			"/auth/2fa/complete",
			{
				token: otp,
				twoFactorType: "APP",
			}
		);

		if (dataInfo) {
			localStorage.setItem("show-modal", "false");
			setStep(2);
			recoveryCode.current = dataInfo.data?.recoveryCode as string;
			setOtpLoading(false);
		}
		if (error) {
			toast.error(error.status, {
				description: error.message,
				duration: 2000,
			});
			setOtpLoading(false);
			setOtp("");
		}
	};

	return (
		<>
			<AuthenticatedUserLayout
				footer={
					<div className="mx-auto flex w-full justify-end">
						<CustomDialog
							trigger={
								<Button
									variant="primary"
									className="w-fit !px-6"
									size="sm"
									disabled={data === undefined || QRCodeError}
								>
									NEXT
								</Button>
							}
						>
							<OtpInputDisplay
								otp={otp}
								setOtp={setOtp}
								topSection={
									<p>
										Enter the 6-digit code generated by your authentication app.
									</p>
								}
								bottomSection={
									<div className="mt-12 lg:mt-20 flex w-full">
										<Button
											className={`${
												otp === "" && "cursor-not-allowed"
											} block w-full rounded-md bg-abeg-primary py-4 font-semibold text-white`}
											fullWidth
											type="submit"
											onClick={() => void handleOtpSubmit()}
											loading={otpLoading}
										>
											Complete
										</Button>
									</div>
								}
							/>
						</CustomDialog>
					</div>
				}
			>
				<div className="mx-auto lg:mt-10 mt-8 w-full">
					<h1 className="text-lg font-semibold md:text-2xl">
						Setting up your two-factor authentication
					</h1>
					<ol className="mt-6 flex list-inside list-none flex-col gap-3">
						<li className="flex flex-col gap-2">
							<h2 className="font-semibold">
								1. Download an authentication app
							</h2>
							<p>
								We recommend downloading Google Authenticator app if you
								don&apos;t have one installed yet.
							</p>
						</li>
						<li className="flex flex-col gap-2">
							<h2 className="font-semibold">
								2. Scan this QR code or copy the key.
							</h2>
							<p>
								Scan this QR code in the authentication app or copy key and
								paste it in the authentication app to generate your verification
								code
							</p>
							<div className="flex min-h-28 items-center">
								{isQRCodeLoading ? (
									<Spinner />
								) : QRCodeError ? (
									<Button
										className="mx-auto"
										variant="secondary"
										onClick={() => setIsQRCodeLoading(true)}
									>
										Retry
									</Button>
								) : (
									<div className="flex w-full flex-col items-center justify-around gap-y-2 lg:flex-row">
										<div className="relative">
											<Image
												src={data?.data?.qrCode as string}
												height={250}
												width={250}
												alt=""
											/>
										</div>
										<div className="flex items-center justify-center gap-2">
											<span className="w-10 border-b-2" />
											<p>or</p>
											<span className="w-10 border-b-2" />
										</div>
										<div className="flex flex-col items-center">
											<span className="text-center font-semibold">
												{data?.data?.secret as string}
											</span>
											<button
												type="button"
												className="mt-2 flex items-center justify-center font-semibold text-abeg-primary"
												onClick={() => void handleCopy()}
											>
												<ClipboardIcon />
												<span>Copy Key</span>
											</button>
										</div>
									</div>
								)}
							</div>
						</li>
						<li className="flex flex-col gap-4">
							<h2 className="font-semibold">3. Copy and enter 6-digit code</h2>
							<p>
								After the QR code has been scanned or the key has been entered,
								your authentication app will generate a 6-digit code. Copy the
								code and click on the Next button to enter it.
							</p>
						</li>
					</ol>
				</div>
			</AuthenticatedUserLayout>
		</>
	);
};

export default FirstStep;
