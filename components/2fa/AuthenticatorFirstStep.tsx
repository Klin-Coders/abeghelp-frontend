import React, { useState } from "react";
import Image from "next/image";
import { useToast } from "../ui/use-toast";
import OtpInput from "react-otp-input";

import Loader from "./Loader";
import QRCode from "@/public/assets/images/shared/QR-code.png";
import { ClipboardIcon } from "@radix-ui/react-icons";
import DialogComponent from "../Shared/Dialog";
import Button from "../primitives/Button/button";

type AuthenticatorFirstStepProps = {
  setStep: React.Dispatch<React.SetStateAction<number>>;
};

const AuthenticatorFirstStep = ({ setStep }: AuthenticatorFirstStepProps) => {
  const [loading] = useState(false);
  const { toast } = useToast();
  const [otp, setOtp] = useState("");
  const someText = "anderson";

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(someText).then(() => {
        toast({
          title: "Success",
          description: "Key copied to clipboard",
          duration: 3000,
        });
      });
    } catch (err) {
      toast({
        title: "Error",
        description: "Could not copy",
        duration: 3000,
      });
    }
  };

  const handleOtpSubmit = () => {
    setStep(2);
  };

  return (
    <section className="flex-1 flex flex-col px-4 max-w-7xl md:px-16 my-4">
      <h1 className=" font-semibold px-4 md:px-[6.25rem] text-lg md:text-2xl">
        Setting up your two-factor authentication
      </h1>
      <ol className=" mt-6 list-inside list-decimal px-4 md:px-[6.25rem] flex flex-col gap-3">
        <li className="font-semibold">Download an authentication app</li>
        <p>
          We recommend downloading Google Authenticator app if you donâ€™t have
          one installed yet.
        </p>
        <li className="font-semibold">Scan this QR code or copy the key.</li>
        <p>
          Scan this QR code in the authentication app or copy key and paste it
          in the authentication app to generate your verification code
        </p>
        <div className="min-h-[12rem] flex items-center">
          {loading ? (
            <Loader />
          ) : (
            <div className="flex flex-col gap-y-2 md:flex-row items-center justify-around w-full">
              <div className="relative">
                <Image
                  className="w-[150px] md:w-[150px] lg:w-[150px] lg:aspect-square"
                  src={QRCode}
                  priority
                  alt=""
                />
              </div>

              <div className="flex items-center justify-center gap-2">
                <span className="border-b-2 w-10" />
                <p>or</p>
                <span className="border-b-2 w-10" />
              </div>

              <div className="flex flex-col items-center">
                <p className="font-bold text-center">
                  FHS DSBS 42H3 WB4F SAIS HFFS ADFV HGT3
                </p>
                <button
                  className="flex text-abeg-teal mt-2 justify-center font-semibold items-center"
                  onClick={() => void handleCopy()}
                >
                  <ClipboardIcon />
                  <span>Copy Key</span>
                </button>
              </div>
            </div>
          )}
        </div>
        <li className="font-semibold">Copy and enter 6-digit code</li>
        <p>
          After the barcode/QR code has been scanned or the key has been
          entered, your authentication app will generate a 6-digit code. Copy
          the code and then come back to enter it.
        </p>
      </ol>
      <hr className="mt-auto" />
      <div className="flex justify-end px-4 max-w-7xl md:px-16 my-4">
        <DialogComponent
          trigger={
            <Button className="bg-abeg-button-10 w-fit " size="sm">
              NEXT
            </Button>
          }
        >
          <div className=" relative py-8 flex w-full md:w-10/12 mx-auto flex-col gap-2">
            <h2 className="text-center font-[500]">
              Get your code from your authentication app
            </h2>
            <p className="text-xs text-center">
              Enter the 6-digit code generated by your authentication app.
            </p>

            <OtpInput
              value={otp}
              onChange={setOtp}
              numInputs={6}
              renderSeparator={<span></span>}
              containerStyle={"flex relative gap-1  h-[2.5rem] "}
              inputType="number"
              inputStyle={
                "  flex-1 h-full border outline-none shadow-md focus:ring-abeg-teal focus:ring-1"
              }
              renderInput={(props) => <input {...props} />}
            />
            <Button
              className="bg-abeg-button-10 mt-8"
              onClick={handleOtpSubmit}
            >
              Complete
            </Button>
          </div>
        </DialogComponent>
      </div>
    </section>
  );
};

export default AuthenticatorFirstStep;
